<!DOCTYPE html>
<html>
<head>
	<meta charset="utf8">
	<meta name="author" content="Tony Gaitatzis">
	<meta name="description" content="Codable Quantum Computer Simulator">
	<title>Quantum Computer Simulator</title>
	<link rel="stylesheet" href="assets/styles/screen.css" />
	<link rel="stylesheet" href="assets/fonts/swiss-cheesed/swiss_ch.css" />
	<link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.3.1/css/all.css" integrity="sha384-mzrmE5qonljUremFsqc01SB46JvROS7bZs3IO2EmfFsd15uHvIt+Y8vEf7N7fWAU" crossorigin="anonymous">
	<script src="assets/scripts/jquery/3.3.1/jquery.min.js"></script>
	<script src="assets/scripts/mathjs/5.0.3/math.min.js"></script>
	<script src="assets/scripts/qcpu.js"></script>
	<script src="assets/scripts/qasm_parser.js"></script>
	<script src="assets/scripts/qasm_editor.js"></script>
	<script src="assets/scripts/qasm_reporter.js"></script>
	<script src="assets/scripts/qasm_runner.js"></script>
	<script src="assets/scripts/lz-string.min.js"></script>
	<script src="assets/scripts/filesystem.js"></script>
	<script src="assets/scripts/filemanager.js"></script>
	<script src="assets/scripts/qasm_file.js"></script>
	<script src="assets/scripts/simulator.js"></script>

	<!-- Facebook OpenGraph -->
	<meta property="og:url" content="https://backupbrain.github.io/quantum-compiler-simulator/" />
	<meta property="og:type" content="website" />
	<meta property="og:title" content="Simulate a Quantum Computer in your Browser" />
	<meta property="og:description" content="Learn to code a quantum computer with this browser-based simulator." />
	<meta property="og:image" content="https://backupbrain.github.io/quantum-compiler-simulator/assets/images/quantum-computer.jpg" />

	<!-- Twitter Cards -->
	<meta name="twitter:card" content="summary" />
	<meta name="twitter:site" content="@gaitatzis" />
	<meta name="twitter:creator" content="@gaitatzis" />
	<meta property="og:url" content="https://backupbrain.github.io/quantum-compiler-simulator/" />
	<meta property="og:title" content="Simulate a Quantum Computer in your Browser" />
	<meta property="og:description" content="Learn to code a quantum computer with this browser-based simulator." />
	<meta property="og:image" content="https://backupbrain.github.io/quantum-compiler-simulator/assets/images/quantum-computer.jpg" />

	<!-- Google Tag Manager -->
<script>(function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
})(window,document,'script','dataLayer','GTM-P2M7SWV');</script>
<!-- End Google Tag Manager -->

</head>
<body>
<!-- Google Tag Manager (noscript) -->
<noscript><iframe src="https://www.googletagmanager.com/ns.html?id=GTM-P2M7SWV"
height="0" width="0" style="display:none;visibility:hidden"></iframe></noscript>
<!-- End Google Tag Manager (noscript) -->
	<header>
		<section>
			<h1>Quantum Computer Simulator</h1>
			<p><a href="index.htm">Program the Quantum Computer Simulator</a></p>
		</section>
	</header>

	<article id="main">
		<section>
			<h2>Introduction to Quantum Computer Programming</h2>
			<p>
				Programming quantum computers is fundamentally different from programming classical computers.
			</p>
			<p>
				Today, quantum computers are programmed in the QASM language, an assembly-type language each qubit is manipuleted one line a time. This is similar to how traditional computers were programmed in the 1950s.
			</p>
			<p>
				Quantum computers will not replace traditional computers. The way they work is quite different, meaning they can solve problems that were complicated for traditional computers. Quantum computers enables radically new ways of solving problems with computers. Quantum computers will touch Artificial intelligence, cryptography, phiysics and chemistry simulations, data organization, and more.
			</p>
			<h3>Bits versus Qubits</h3>
			<p>
				Traditional computers store bits data using transistors. These transistors can either be on or off, typically represented as 1 or 0.
			</p>
			<p>
				Quantum computers use qubits - single atomic particles than can be in an "up" or "down" state - typically measured as 1 or 0. These particles can also be put into a superposition - a special state where they are both up and down at the same time.
			</p>
			<h3>Superposition</h3>
			<p>
				 Superposition is special because it allows for controlled randomness. The qubit can be manipulated to have a known probablity of ending up in the up or down state.
			</p>
			<p>
				The superposition state is unstable, and once measured will collapse back into a discrete up or down state, but the probablity of doing so is dependent on the properties of the qubit's superposition at that time. 
			</p>
			<p>
				An important point to note is that superposition results in <strong>true randomness</strong> where the probabilities can be controlled. This is considered impossible for a traditional computer and has interetesting implications for cryptography, wheere random numbers known as "nonces" are important.
			</p>
			<p>
				A basic superposition can be accessed using the <code>h</code> gate. When measured, the qubit will collapse into 0 or 1 with a 50% propability. This is similar to telling a traditional computer to preform <code>round(rand(0, 1))</code>.
			</p>
			<h3>Entanglement</h3>
			<p>
				Two or more qubits can be entangled, meaning that what happens to one happens to the other. Once entangled, an action taken on one qubit affects the entangled qubits simultaneously. For example, if a qubit is put in superposition and entangled with another qubit, both qubits are then in the same superposition. When one is measured, it collapses randomly to 0 or 1. The entangled qubit simultaneously collapes to the same value.
			</p>
			<p>
				Entanglement has interesting implications in encrypted communications, because the entangled qubits never touch or move, and measuring them breaks the entanglement. This means that a hacker would destroy a message by trying to read it.
			</p>
			<p>
				An entanglement between two qubits can be performed with the <code>cx</code> gate. This is similar to telling a traditional computer something like:
				<code>
					a = b;
				</code>
			</p>
			<p>
				By combining superposition and entanglement to create more interesting outcomes.
			</p>
			<p>
				One or more entangled qubits can also be manipulated so that they have different superposition properties, yet affect each other. For instance if two qubits are entangled and one is set to be the Pauli-X (a type of not gate) of the other, than when one is mearused, the other qubit reports the opposite value.
			</p>
			<p>
				In this example, one qubit is put into superposition with the <code>h</code> gate, then entangled with another using the <code>cx</code> gate, then the other qubit's superposition is inverted with the <code>x</code> gate, like this:
			</p>
			<pre>
				h q[0];
				cx q[0], q[1];
				x q[1];
			</pre>
			<p>
				This is similar to telling a classical computer something like:
			</p>
			<pre>
				a = round(rand(0, 1));
				b = !a;
			</pre>
			<h3>Running Iterative Tests</h3>
			<p>
				On a quantum computer it is typically useful to run the same code many times, because often the code include randomness and the programmer typically wants to see how often the quantum computer settles on discrete outputs.
			</p>
			<p>
				For this reason you may want to alter the "# iterations" field before running a program. The raw data table will show the output binary values each time the simulator ran the code, and the summary table will show the percent each unique binary value was reached.
			</p>
			<h3>About the Simulator</h3>
			<p>
				There are a few quantum computers today. They are amazing, yet challenging to use because there is often a queue or limited qubits. This simulator was designed to allow users to program and test simple quantum computer programs without needing to wait for their code to run on someone else's servers.
			</p>
			<p>
				This simulator is what's known as an "ideal quantum computer," meaning that any and all qubits can be entagled and qubits don't collapse from superposition unexpectedly. A real quantum computer has physical limitations on which qubits can be entangled and for how long superposition states can be maintained. Code you write here may need to be altered slightly to work on a real quantum computer. 
			</p>
			<p>
				This simulator runs on your web browser in JavaScript, meaning that you don't need a web server or an account somewhere to run it. You do not share this simulator with other people. It is yours to enjoy. Be careful, Your computer will run out of memory if you try to create too many qubits.
			</p>
		</section>
	</article>
	<article id="supported_functions">
		<section>
			<h2>Supported Functions:</h2>
			<p>
				The functions currentnly supported by the simulator are as follows:
			</p>

			<table id="functions">
				<thead>
					<tr>
						<th>Function</th>
						<th>Example</th>
						<th>Description</th>
					</tr>
				</thead>
					<tbody>
					<tr>
						<td>qreg</td>
						<td>qreg q[<em>N</em>];</td>
						<td>Register <em>N</em> quantum bits</td>
					</tr>
					<tr>
						<td>creg</td>
						<td>creg c[<em>N</em>];</td>
						<td>Register <em>N</em> classical bits</td>
					</tr>
					<tr>
						<td><a href="https://en.wikipedia.org/wiki/Quantum_logic_gate#Universal_quantum_gates#Measurement">measure</a></td>
						<td>measure q[<em>q_id</em>] -> c[<em>c_id</em>];</td>
						<td>Collapse qubit <em>q_id</em> into classical bit <em>c_id</em></td>
					</tr>
					<tr>
						<td><a href="https://towardsdatascience.com/demystifying-quantum-gates-one-qubit-at-a-time-54404ed80640#7220">h</a></td>
						<td>h q[<em>id</em>];</td>
						<td>Perform hadamard gate on qubit <em>id</em></td>
					</tr>
					<tr>
						<td><a href="https://towardsdatascience.com/demystifying-quantum-gates-one-qubit-at-a-time-54404ed80640#edbe">x</a></td>
						<td>x q[<em>id</em>];</td>
						<td>Perform Pauli X-gate on qubit <em>id</em></td>
					</tr>
					<tr>
						<td><a href="https://towardsdatascience.com/demystifying-quantum-gates-one-qubit-at-a-time-54404ed80640#2679">y</a></td>
						<td>y q[<em>id</em>];</td>
						<td>Perform Pauli Y-gate on qubit <em>id</em></td>
					</tr>
					<tr>
						<td><a href="https://towardsdatascience.com/demystifying-quantum-gates-one-qubit-at-a-time-54404ed80640#2679">z</a></td>
						<td>z q[<em>id</em>];</td>
						<td>Perform Pauli Z-gate on qubit <em>id</em></td>
					</tr>
					<tr>
						<td><a href="https://towardsdatascience.com/demystifying-quantum-gates-one-qubit-at-a-time-54404ed80640#2679">s</a></td>
						<td>s q[<em>id</em>];</td>
						<td>Perform S-gate on qubit <em>id</em></td>
					</tr>
					<tr>
						<td><a href="https://towardsdatascience.com/demystifying-quantum-gates-one-qubit-at-a-time-54404ed80640#2679">sdg</a></td>
						<td>sdg q[<em>id</em>];</td>
						<td>Perform S&#10013;-gate on qubit <em>id</em></td>
					</tr>
					<tr>
						<td><a href="https://towardsdatascience.com/demystifying-quantum-gates-one-qubit-at-a-time-54404ed80640#2679">t</a></td>
						<td>t q[<em>id</em>];</td>
						<td>Perform T-gate on qubit <em>id</em></td>
					</tr>
					<tr>
						<td><a href="https://towardsdatascience.com/demystifying-quantum-gates-one-qubit-at-a-time-54404ed80640#2679">sdg</a></td>
						<td>tdg q[<em>id</em>];</td>
						<td>Perform T&#10013;-gate on qubit <em>id</em></td>
					</tr>
					<tr>
						<td><a href="https://en.wikipedia.org/wiki/Quantum_logic_gate#Universal_quantum_gates#Circuit_composition_and_entangled_states">cx</a></td>
						<td>cx q[<em>id1</em>], q[<em>id2</em>];</td>
						<td>Entangle quantum bit <em>id1</em> with <em>id2</em></td>
					</tr>
				</tbody>
			</table>
		</section>
	</article>

	<footer>
		<div id="copyright">
			&copy; 2018 <a href="https://github.com/backupbrain">Tony Gaitatzis</a>, <a href="https://opensource.org/licenses/MIT">MIT License</a>
		</div>
	</footer>


<div id="file_modal_dimmer" class="modal_dimmer start_hidden">
	<div id="file_lister" class="start_hidden">
		<div class="modal_title">
			<div class="title_text">Open File</div>
			<div class="close_modal">
				<button class="close_modal"><i class="fas fa-times"></i></button>
			</div>
			<div class="clear"></div>
		</div>
		<div id="file_list_container" class="file_list_container">
			<table>
				<thead>
					<tr>
						<th>File Name</th>
						<th>Date Created</th>
						<th>Date Modified</th>
						<th>Size</th>
					</tr>
				</thead>
				<tbody>
					<tr>
						<td><a href="">One</a></td><td>Date</td><td>Date</td><td>Size</td>
					</tr>
				</tbody>
			</table>
		</div>
	</div>
</div>

</body>
</html>